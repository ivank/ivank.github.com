<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: functest | Develop Simply]]></title>
  <link href="http://ivank.github.com/blog/categories/functest/atom.xml" rel="self"/>
  <link href="http://ivank.github.com/"/>
  <updated>2012-10-29T14:49:12+02:00</updated>
  <id>http://ivank.github.com/</id>
  <author>
    <name><![CDATA[Ivan Kerin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The joy of (Func)Testing]]></title>
    <link href="http://ivank.github.com/blog/2012/10/the-joy-of-func-testing/"/>
    <updated>2012-10-26T19:42:00+03:00</updated>
    <id>http://ivank.github.com/blog/2012/10/the-joy-of-func-testing</id>
    <content type="html"><![CDATA[<p>Testing in PHP has always been hard - PHP Devs generally just don't "get it". There have been some recent developments from Symfony camp, but again they are not easily integratable with Kohana - the framework I'm most interested in. And the saddest thing is there are great testing frameworks out there in other languages and the fact that nobody has tried to accomplish something similar in PHP is just heartbreaking. I mean - the best answer to "how to do functional testing in PHP" is "selenium with PHPUnit", even if what you want to test is just some form input without any javascript - that can get tough on you.</p>

<p>Anyway I rolled up my sleeves and started on the long and perilous journey of writing my own testing framework. Well not exactly - I mostly got the DSL idea from Capybara, and wrote it on top of Kohana Unittest (PHPUnit) but the result is I think quite significant in itself.</p>

<h2><a href="https://github.com/OpenBuildings/functest">FuncTest</a></h2>

<p>The core principles of FuncTest are to be as easy to write the test as possible, and to execute it as fast as possible. Great! But what does that mean in practice? Here's an example test, straight from the docs:</p>

<p>```php
&lt;?php defined('SYSPATH') OR die('No direct script access.');</p>

<p>class myTest extends FuncTest_TestCase {</p>

<pre><code>public function test_finders()
{
    $this
        -&gt;visit('/my/url')
        -&gt;fill_in('Name', 'John')
        -&gt;fill_in('Username', 'john-user')
        -&gt;select('Select Year', '2004')
        -&gt;check('Recieve Newsletter')
        -&gt;click_button('Create User');
}
</code></pre>

<p>}
?>
```
Looks easy right? Well it will do exactly what you think it would:</p>

<ul>
<li>Go to URL /my/url</li>
<li>Fill in the input tag labeled with 'John' (yes labeled - like a label tag with a for='id' that matches the id of the input tag)</li>
<li>Fill in the input tag labeled Username with 'john-user'</li>
<li>Select 2004 from the dropdown labeled 'Select Year'</li>
<li>Check the checkbox labeled 'Recieve Newsletter'</li>
<li>Click the button 'Create User'</li>
</ul>


<p>Why use titles / labels instead of 'name' attributes or even css selectors, well - if you wanted to you can, and that too is pretty easy, but in my experience the texts change much less frequently than the internal stuff.</p>

<p>And the best part is - this will work with the Kohana classes themselves internally (actually using HMVC patterns for special internal requests) - so there are no network, apache or Kohana framework overhead whatsoever.</p>

<p>And ... just one more thing - if you want to run this in selenium (for ajax testing for example): just add <code>public $driver_name = 'selenium'</code> to your class - and you're good to go - the same test will run by actually opening up your browser and filling in these fields.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New open source libraries]]></title>
    <link href="http://ivank.github.com/blog/2012/10/new-opensoure-libraries/"/>
    <updated>2012-10-26T14:55:00+03:00</updated>
    <id>http://ivank.github.com/blog/2012/10/new-opensoure-libraries</id>
    <content type="html"><![CDATA[<p>I've always been a believer that in order to write first class code, one has to write it as if they will be released in the wild - with all the consistency, documentation and general bad-ass-ness that it requires. And that's the test I generally use to find out if I've written a mess - "Can I release this in the wild with my name attached to it". Well if the answer is "yes" and I will not have the urge to hide in a dark corner whenever I see someone else using it, then what the hell, why not actually release it.</p>

<p>So to put my money where my mouth is, here are the libraries that I've decided to release open source. They are all Kohana 3.2 modules for now, with the ambition to upgrade them to 3.3 in the near future.</p>

<ul>
<li><a href="https://github.com/OpenBuildings/jam">Jam</a> - ORM replacement module, inspired by Kohana Jelly</li>
<li><a href="https://github.com/OpenBuildings/jam-auth">Jam Auth</a> - user authentication and permissions with Jam, as well as external service login support (e.g. facebook)</li>
<li><a href="https://github.com/OpenBuildings/services-manager">Services Manager</a> - A library to encapsulate talking to external services, with different configs for different environments</li>
<li><a href="https://github.com/OpenBuildings/functest">FuncTest</a> - Functional Testing, inspired by ruby's Capybara, with selenium and native drivers</li>
<li><a href="https://github.com/OpenBuildings/jamaker">Jamaker</a> - A Database population tool, inspired by Factory Girl</li>
</ul>


<p>These are all great tools that we use daily in production and have a lot of documentation and examples in their respective README's, I'll be really happy to get some feedback on these.</p>

<p>Also, some of the previously released libraries have been updated</p>

<ul>
<li><a href="https://github.com/OpenBuildings/timestamped-migrations">Timestamped Migrations</a> - moved to kohana minion, more options, docs and consistency throughout.</li>
<li><a href="https://github.com/OpenBuildings/asset-merger">Assets Merger</a> - added automatic tests to make sure the processors work.</li>
</ul>


<p>I'll try to present each one of these libraries on its own in future posts, but for now you can check out the docs of the libraries themselves.</p>
]]></content>
  </entry>
  
</feed>
